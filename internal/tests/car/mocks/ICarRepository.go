// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/cassiusbessa/goCarShop/internal/db/entities"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "github.com/cassiusbessa/goCarShop/internal/utils"
)

// ICarRepository is an autogenerated mock type for the ICarRepository type
type ICarRepository struct {
	mock.Mock
}

// CreateCar provides a mock function with given fields: ctx, car
func (_m *ICarRepository) CreateCar(ctx context.Context, car entity.ICar) (*entity.ICar, *utils.CustomError) {
	ret := _m.Called(ctx, car)

	var r0 *entity.ICar
	if rf, ok := ret.Get(0).(func(context.Context, entity.ICar) *entity.ICar); ok {
		r0 = rf(ctx, car)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ICar)
		}
	}

	var r1 *utils.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, entity.ICar) *utils.CustomError); ok {
		r1 = rf(ctx, car)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.CustomError)
		}
	}

	return r0, r1
}

// DeleteCar provides a mock function with given fields: ctx, id
func (_m *ICarRepository) DeleteCar(ctx context.Context, id primitive.ObjectID) *utils.CustomError {
	ret := _m.Called(ctx, id)

	var r0 *utils.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *utils.CustomError); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.CustomError)
		}
	}

	return r0
}

// GetAllCars provides a mock function with given fields: ctx
func (_m *ICarRepository) GetAllCars(ctx context.Context) (*[]entity.ICar, *utils.CustomError) {
	ret := _m.Called(ctx)

	var r0 *[]entity.ICar
	if rf, ok := ret.Get(0).(func(context.Context) *[]entity.ICar); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ICar)
		}
	}

	var r1 *utils.CustomError
	if rf, ok := ret.Get(1).(func(context.Context) *utils.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.CustomError)
		}
	}

	return r0, r1
}

// GetCar provides a mock function with given fields: ctx, id
func (_m *ICarRepository) GetCar(ctx context.Context, id primitive.ObjectID) (*entity.ICar, *utils.CustomError) {
	ret := _m.Called(ctx, id)

	var r0 *entity.ICar
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.ICar); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ICar)
		}
	}

	var r1 *utils.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) *utils.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.CustomError)
		}
	}

	return r0, r1
}

// UpdateCar provides a mock function with given fields: ctx, id, car
func (_m *ICarRepository) UpdateCar(ctx context.Context, id primitive.ObjectID, car entity.ICar) (*entity.ICar, *utils.CustomError) {
	ret := _m.Called(ctx, id, car)

	var r0 *entity.ICar
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, entity.ICar) *entity.ICar); ok {
		r0 = rf(ctx, id, car)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ICar)
		}
	}

	var r1 *utils.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, entity.ICar) *utils.CustomError); ok {
		r1 = rf(ctx, id, car)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewICarRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICarRepository creates a new instance of ICarRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICarRepository(t mockConstructorTestingTNewICarRepository) *ICarRepository {
	mock := &ICarRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
